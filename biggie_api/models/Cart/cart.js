const mongoose = require("mongoose");

const cartSchema = new mongoose.Schema(
  {
    table_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Table",
    },
    created_by: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
    discount: {
      type: Number,
    },
    discount_type: {
      type: String,
    },
    client_pin: {
      type: String,
    },
    order_no: {
      type: String,
      unique: true,
    },
    status: {
      type: String,
      enum: ["Open", "Closed"],
      default: "Open",
    },
    void: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
  }
);


// Autogenerated code pre-save hook
cartSchema.pre("save", async function (next) {
  if (!this.order_no) {
    try {
      const generatedOrderNo = await generateUniqueCode(this, 6);
      this.order_no = generatedOrderNo;
      next();
    } catch (err) {
      next(err);
    }
  } else {
    next();
  }
});

// Autogenerated code generator function
const generateUniqueCode = async (cart, length) => {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let order_no = "ORD#";

  while (!cart.order_no) {
    for (let i = 0; i < length; i++) {
      order_no += characters.charAt(Math.floor(Math.random() * characters.length));
    }

    const query = { order_no: order_no };
    if (cart._id) {
      query._id = { $ne: cart._id };
    }

    const existingOrder = await Cart.findOne(query).exec();
    if (!existingOrder) {
      return order_no;
    } else {
      order_no = "ORD#";
    }
  }
};


const Cart = mongoose.model("Cart", cartSchema);

module.exports = Cart;
