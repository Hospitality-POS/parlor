const mongoose = require("mongoose");
// const {isURL} = require('validator')

const productSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    code: {
      type: String,
      unique: true,
    },
    category: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
    },
    quantity: {
      type: Number,
      required: true,
    },
    price: {
      type: Number,
      required: true,
    },
    desc: {
      type: String,
    },
    min_viable_quantity: {
      type: Number,
      required: false,
    },
    addons: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Addons",
      },
    ],
  },
  {
    timestamps: true,
  }
);

// Create a unique index for the code field
productSchema.index({ code: 1 }, { unique: true });

// Autogenerated code pre-save hook
productSchema.pre("save", async function (next) {
  if (!this.code) {
    const generatedCode = await generateUniqueCode(this, 6);
    this.code = generatedCode;
  }
  next();
});

// Autogenerated code generator function
const generateUniqueCode = async (product, length) => {
  const characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let code = "";

  while (!code) {
    for (let i = 0; i < length; i++) {
      code += characters.charAt(Math.floor(Math.random() * characters.length));
    }

    const query = { code: code };
    if (product._id) {
      query._id = { $ne: product._id };
    }

    const existingProduct = await Product.findOne(query).exec();
    if (!existingProduct) {
      return code; // Return the generated code if it is unique
    } else {
      code = "";
    }
  }
};

const Product = mongoose.model("Product", productSchema);

module.exports = Product;